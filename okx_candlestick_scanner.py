
import streamlit as st
import requests
import pandas as pd
import pandas_ta as ta

st.set_page_config(page_title="OKX Candlestick Scanner", layout="wide")

st.title("üïØÔ∏è OKX Candlestick Pattern Scanner (pandas-ta version)")

# –í—ã–±–æ—Ä —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞ –∏ –ø–∞—Ç—Ç–µ—Ä–Ω–∞
interval = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∞–π–º—Ñ—Ä–µ–π–º", ["1h", "4h", "1d"])
pattern = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ —Å–≤–µ—á–Ω–æ–π –ø–∞—Ç—Ç–µ—Ä–Ω", ["hammer", "doji", "engulfing", "morning_star", "evening_star"])

def get_symbols():
    """–ü–æ–ª—É—á–∞–µ—Ç –≤—Å–µ USDT —Ç–æ—Ä–≥–æ–≤—ã–µ –ø–∞—Ä—ã —Å OKX."""
    url = "https://www.okx.com/api/v5/market/tickers?instType=SPOT"
    res = requests.get(url).json()
    return [
        t["instId"] for t in res["data"]
        if t["instId"].endswith("USDT")
    ]

@st.cache_data(ttl=3600)
def fetch_ohlcv(symbol, interval, limit=100):
    """–ü–æ–ª—É—á–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –ø–æ —Å–≤–µ—á–∞–º."""
    granularity = {"1h": 3600, "4h": 14400, "1d": 86400}[interval]
    url = f"https://www.okx.com/api/v5/market/candles?instId={symbol}&bar={interval}&limit={limit}"
    response = requests.get(url)
    data = response.json().get("data", [])

    if not data:
        return None

    df = pd.DataFrame(data, columns=[
        "timestamp", "open", "high", "low", "close", "volume", "_", "__"
    ])
    df = df.iloc[::-1]  # –í –æ–±—Ä–∞—Ç–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ (–æ—Ç —Å—Ç–∞—Ä—ã—Ö –∫ –Ω–æ–≤—ã–º)
    df = df.astype(float)
    df["timestamp"] = pd.to_datetime(df["timestamp"], unit="ms")
    df.set_index("timestamp", inplace=True)
    return df[["open", "high", "low", "close", "volume"]]

def detect_pattern(df, pattern_name):
    """–ü—Ä–∏–º–µ–Ω—è–µ—Ç —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ –ø–∞—Ç—Ç–µ—Ä–Ω–∞ –∏–∑ pandas-ta."""
    func = {
        "hammer": ta.hammer,
        "doji": ta.doji,
        "engulfing": ta.engulfing,
        "morning_star": ta.morningstar,
        "evening_star": ta.eveningstar,
    }.get(pattern_name)

    if func:
        result = func(df["open"], df["high"], df["low"], df["close"])
        return result.iloc[-1]  # –ü–æ—Å–ª–µ–¥–Ω—è—è —Å–≤–µ—á–∞

    return None

if st.button("üîç –ù–∞—á–∞—Ç—å —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ"):
    symbols = get_symbols()
    matches = []

    with st.spinner("–°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ..."):
        for sym in symbols:
            df = fetch_ohlcv(sym, interval)
            if df is None or len(df) < 10:
                continue

            result = detect_pattern(df, pattern)
            if result and result != 0:
                matches.append((sym, result))

    if matches:
        st.success(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(matches)} –º–æ–Ω–µ—Ç —Å –ø–∞—Ç—Ç–µ—Ä–Ω–æ–º '{pattern}':")
        for sym, res in matches:
            st.write(f"- {sym} ({'Bullish' if res > 0 else 'Bearish'})")
    else:
        st.warning("–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
