# --- –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å Streamlit ---
st.title("üìä OKX Candlestick Scanner")

selected_tf = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∞–π–º—Ñ—Ä–µ–π–º:", TIMEFRAMES)
selected_patterns = st.multiselect(
    "–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã:", list(PATTERN_FUNCTIONS.keys()),
    default=["hammer", "engulfing", "doji"]
)

max_age = st.slider("–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç —Å–∏–≥–Ω–∞–ª–∞ (–≤ –º–∏–Ω—É—Ç–∞—Ö):", 0, 240, 30, step=5)

if st.button("üîç –ù–∞—á–∞—Ç—å —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ"):
    with st.spinner("–ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏ –∏—â–µ–º —Å–∏–≥–Ω–∞–ª—ã..."):
        symbols = get_okx_symbols()
        results = []
        for i, symbol in enumerate(symbols):
            st.text(f"[{i+1}/{len(symbols)}] {symbol}")
            signals = process_symbol(symbol, selected_tf, selected_patterns)
            results.extend(signals)
            time.sleep(0.15)

    if results:
        df_results = pd.DataFrame(results)
        df_filtered = df_results[df_results["age_min"] <= max_age]
        if df_filtered.empty:
            st.warning(f"‚ùå –ù–µ—Ç —Å–∏–≥–Ω–∞–ª–æ–≤ –º–æ–ª–æ–∂–µ {max_age} –º–∏–Ω.")
        else:
            st.success(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(df_filtered)} —Å–∏–≥–Ω–∞–ª–æ–≤ –º–ª–∞–¥—à–µ {max_age} –º–∏–Ω.")
            st.dataframe(df_filtered)
    else:
        st.warning("‚ùå –ü–∞—Ç—Ç–µ—Ä–Ω—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
